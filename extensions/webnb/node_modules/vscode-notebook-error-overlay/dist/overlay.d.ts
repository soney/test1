export interface IErrorOverlayManager {
    /**
     * Installs the error in the given container
     */
    install(container: HTMLElement | null): void;
    /**
     * Wraps the function, catching and displaying rejected errors in the
     * container element. Resolves as undefined if an error occurred.
     */
    wrap<T>(container: HTMLElement | null, fn: () => PromiseLike<T>): Promise<T | undefined>;
    /**
     * Wraps the function, catching and displaying thrown errors in the
     * container element. Returns undefined if an error occurred.
     */
    wrap<T>(container: HTMLElement | null, fn: () => T): T | undefined;
    /**
     * Removes the error overlay listener.
     */
    uninstall(): void;
}
/**
 * Implementation of the error overlay manager.
 */
export declare class ErrorOverlayManager implements IErrorOverlayManager {
    private containers;
    private unmountOverlay;
    private isInstalledGlobally;
    private readonly listener;
    /**
     * @inheritdoc
     */
    install(container: HTMLElement): void;
    /**
     * @inheritdoc
     */
    wrap<T>(container: HTMLElement | null, fn: () => PromiseLike<T>): Promise<T | undefined>;
    /**
     * @inheritdoc
     */
    wrap<T>(container: HTMLElement | null, fn: () => T): T | undefined;
    /**
     * @inheritdoc
     */
    uninstall(): void;
    private displayErrorIn;
    private hideErrorIn;
}
