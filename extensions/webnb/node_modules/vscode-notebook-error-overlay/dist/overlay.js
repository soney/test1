/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
import { render, h } from 'preact';
import { Overlay } from './ui.js';
const isPromiseLike = (x) => typeof x === 'object' && !!x && typeof x.then === 'function';
/**
 * Implementation of the error overlay manager.
 */
export class ErrorOverlayManager {
    containers = [];
    unmountOverlay = new Map();
    isInstalledGlobally = false;
    listener = (rawEvent) => {
        if (rawEvent.data.type === 'webpackErrors') {
            for (const container of this.containers) {
                this.displayErrorIn(container, rawEvent.data.data, 1 /* ErrorSource.Compilation */);
            }
        }
    };
    /**
     * @inheritdoc
     */
    install(container) {
        if (!this.isInstalledGlobally) {
            this.isInstalledGlobally = true;
            window.addEventListener('message', this.listener);
        }
        const containers = this.containers.filter((c) => document.body.contains(c));
        containers.push(container);
        this.containers = containers;
    }
    wrap(container, fn) {
        if (!container) {
            return;
        }
        this.hideErrorIn(container, false);
        this.install(container);
        const retry = () => this.wrap(container, fn);
        try {
            const ret = fn();
            if (ret && isPromiseLike(ret)) {
                return ret.then((v) => v, (err) => {
                    this.displayErrorIn(container, [err], 0 /* ErrorSource.Runtime */, retry);
                    return undefined;
                });
            }
        }
        catch (err) {
            this.displayErrorIn(container, [err], 0 /* ErrorSource.Runtime */, retry);
        }
        return undefined;
    }
    /**
     * @inheritdoc
     */
    uninstall() {
        for (const unmount of this.unmountOverlay.values()) {
            unmount(false);
        }
        this.unmountOverlay.clear();
        window.removeEventListener('message', this.listener);
    }
    displayErrorIn(container, errors, source, retry) {
        if (!container) {
            return;
        }
        this.hideErrorIn(container, false); // make sure we don't ovewrite and get confused
        const errorStrs = errors.map((e) => typeof e === 'string' ? e : e.stack || e.message || String(e));
        const elem = (h(Overlay, { source: source, close: () => this.hideErrorIn(container, true), errors: errorStrs }));
        render(elem, container);
        this.unmountOverlay.set(container, (allowRetry) => {
            const overlay = container.querySelector('.notebook-error-overlay');
            if (overlay) {
                container.removeChild(overlay);
            }
            if (allowRetry && retry) {
                retry();
            }
        });
    }
    hideErrorIn(container, allowRetry) {
        const unmountFn = this.unmountOverlay.get(container);
        if (unmountFn) {
            unmountFn(allowRetry);
            this.unmountOverlay.delete(container);
        }
    }
}
//# sourceMappingURL=overlay.js.map